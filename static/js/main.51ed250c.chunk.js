(this.webpackJsonpterminal=this.webpackJsonpterminal||[]).push([[0],{30:function(e,t,s){},31:function(e,t,s){"use strict";s.r(t);var i=s(1),c=s.n(i),r=s(14),n=s.n(r),o=s(7),a=s(0),d=function(){return Object(a.jsx)("header",{children:Object(a.jsxs)("nav",{children:[Object(a.jsx)(o.b,{to:"/",className:"underline",children:"/About"}),Object(a.jsx)(o.b,{to:"/Projects",className:"underline",children:"/Projects"}),Object(a.jsx)(o.b,{to:"/Writeups",className:"underline",children:"/Writeups"}),Object(a.jsx)("a",{href:"mailto:yassine.sebri@enetcom.u-sfax.tn ",className:"underline",children:"/Contact"})]})})},j=function(){return Object(a.jsx)("div",{className:"site-title",children:Object(a.jsxs)("h1",{children:["yassine@dev:$",Object(a.jsx)("span",{class:"cursor",children:"\u2588"})]})})},b=s(16),h=s.n(b),l=function(){return Object(a.jsx)(h.a,{options:{loop:!1,delay:65,autoStart:!0,cursor:"\u2588",strings:[""]},onInit:function(e){e.typeString("Hi! <br>").pauseFor(300).typeString(" I'm Yassine,").pauseFor(100).typeString(" a student,").pauseFor(100).typeString(" developer and hacker.<br/>").pauseFor(500).typeString("I love tinkering with different technologies and exploring their inner workings.<br/>").pauseFor(300).typeString("My interests include CTF challenges and competitive programming.<br/>").pauseFor(300).typeString("Feel free to check my work.<br/>")}})},p=function(){return Object(a.jsxs)("footer",{children:[Object(a.jsx)("a",{href:"https://www.linkedin.com/in/yassinesebri/",class:"svglink",target:"__blank",children:Object(a.jsx)("i",{class:"fab fa-linkedin"})}),Object(a.jsx)("a",{href:"https://github.com/Yassine-Sebri/",class:"svglink",target:"__blank",children:Object(a.jsx)("i",{class:"fab fa-github"})}),Object(a.jsx)("a",{href:"https://twitter.com/root0x03",class:"svglink",target:"__blank",children:Object(a.jsx)("i",{class:"fab fa-twitter"})}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"\xa9 Copyright 2021 - Yassine Sebri."]})},x=function(){return Object(a.jsxs)("div",{id:"Writeups",children:["2021-03-02 -"," ",Object(a.jsx)(o.b,{to:"/Writeups/Microcorruption-Hanoi",className:"highlight",children:"Microcorruption: Hanoi"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"2021-03-01 -"," ",Object(a.jsx)(o.b,{to:"/Writeups/Microcorruption-Sydney",className:"highlight",children:"Microcorruption: Sydney"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"2021-02-28 -"," ",Object(a.jsx)(o.b,{to:"/Writeups/Microcorruption-New-Orleans",className:"highlight",children:"Microcorruption: New Orleans"})]})},u=s.p+"static/media/NOmain.ae5582a9.png",O=s.p+"static/media/NOcreate.f20144c7.png",m=s.p+"static/media/NOcheck.4df114ba.png",g=s.p+"static/media/NOmemory.5e47a375.png",f=s.p+"static/media/NOsolved.79735ff6.png",w=function(){return Object(a.jsxs)("div",{children:[Object(a.jsx)("br",{}),Object(a.jsx)("h1",{children:"Microcorruption: New Orleans"}),"2021-02-28",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"This will be the first of a series of posts where I detail my answers to various"," ",Object(a.jsx)("a",{href:"https://microcorruption.com/",target:"__blank",children:"microcorruption"})," ","ctf challenges. The objective of these challenges is to unlock a device by reverse-engineering its code and exploiting its vulnerabilities. With that out of the way, let's get hacking!",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"The first thing I did was set up a break point at"," ",Object(a.jsx)("span",{id:"code",children:"main"}),", since that's the entry point for our program.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:u,alt:"main"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"This code might seem intimidating if you aren't familiar with assembly, but it's actually quite simple. First, it calls a"," ",Object(a.jsx)("span",{id:"code",children:"create_password"})," function, then it prints a string with the ",Object(a.jsx)("span",{id:"code",children:"puts"})," function. Next, it gets a password from the user and checks if it's correct. Depending on the content of"," ",Object(a.jsx)("span",{id:"code",children:"r15"})," after ",Object(a.jsx)("span",{id:"code",children:"check_password"})," is executed, the door will either unlock or remain locked.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"First of all, Let's take a closer look at"," ",Object(a.jsx)("span",{id:"code",children:"create_password"}),", since it seems like a promising function.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:O,alt:"create_password"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"The first instruction seems to be saving a hex number into"," ",Object(a.jsx)("span",{id:"code",children:"r15"})," which will act as a memory address, then it proceeds to move 8 bytes into memory address ",Object(a.jsx)("span",{id:"code",children:"0x2400"})," ","to ",Object(a.jsx)("span",{id:"code",children:"0x2407"}),". it's probably safe to assume that the program will compare this sequence of bytes to the password given by the user later on, but let's follow along for now.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:m,alt:"check_password"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"A quick read through ",Object(a.jsx)("span",{id:"code",children:"check_password"})," shows us that it follows the structure of a while loop, where"," ",Object(a.jsx)("span",{id:"code",children:"r14"})," acts as a counter starting from 0 till it reaches the value 8. ",Object(a.jsx)("span",{id:"code",children:"r14"})," will increment if the bytes at address ",Object(a.jsx)("span",{id:"code",children:"0x2400"})," previously set by the"," ",Object(a.jsx)("span",{id:"code",children:"create_password"})," function match the user input stored at the memory address in r13. if ",Object(a.jsx)("span",{id:"code",children:"r14"})," reaches 8, ",Object(a.jsx)("span",{id:"code",children:"r15"})," receives the value 1 which will then unlock the door.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Knowing that, we just have to enter the string stored"," ",Object(a.jsx)("span",{id:"code",children:"0x2400"})," to solve the challenge. We can copy the string using the Live Memory Dump window.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:g,alt:"Live Memory Dump"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Et voila! It was a pretty straightforward solution meant to familiarize newcomers with reading and understanding assembly code.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:f,alt:"Challenge solved"})]})},v=s.p+"static/media/Smain.95a7407e.png",y=s.p+"static/media/Scheck.e265bc37.png",k=s.p+"static/media/Ssolved.acc97ee8.png",I=function(){return Object(a.jsxs)("div",{children:[Object(a.jsx)("br",{}),Object(a.jsx)("h1",{children:"Microcorruption: Sydney"}),"2021-03-01",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"As usual, let's start by taking a look at the ",Object(a.jsx)("span",{id:"code",children:"main"})," ","function.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:v,alt:"main"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Unlike last time, there doesn't seem to be a"," ",Object(a.jsx)("span",{id:"code",children:"create_password"})," function, but the flow is pretty similar. First it gets a password from the user then it executes the"," ",Object(a.jsx)("span",{id:"code",children:"check_password"})," function, and depending on the value of ",Object(a.jsx)("span",{id:"code",children:"r15"})," after the execution it decides whether to open the lock or not. It seems that the"," ",Object(a.jsx)("span",{id:"code",children:"check_password"})," function is key in this whole thing, so let's check it out.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:y,alt:"check_password"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"The ",Object(a.jsx)("span",{id:"code",children:"check_password"})," performs a series of comparisons between the values stored at an offset from memory address"," ",Object(a.jsx)("span",{id:"code",children:"r15"})," and a set of hexadecimal values. If the values match then ",Object(a.jsx)("span",{id:"code",children:"r15"})," would receive the value 1, fulfilling the condition for unlocking the door. The memory values stored at ",Object(a.jsx)("span",{id:"code",children:"r15"})," represent the password entered by the user, so all we have to do to solve the challenge is submit the hexadecimal values found in this function.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),'Submitting the values as is won\'t solve the challenge, however. This challenge was probably designed to teach people about the concepts of "big endian" and "little endian". A big endian system stores the most significant byte of a word at the smallest memory address while a little endian system does the opposite. This might seem a bit confusing but it just means that if you give a 16 bit CPU that uses little endian a value of ',Object(a.jsx)("span",{id:"code",children:"0x4142"}),", for example, it will be stored in memory as ",Object(a.jsx)("span",{id:"code",children:"0x4241"}),".",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"So in order to solve the challenge, we have to invert the hexadecimal values in the ",Object(a.jsx)("span",{id:"code",children:"check_password"})," function two by two. So in this case the password would be (in hexadecimal)"," ",Object(a.jsx)("span",{id:"code",children:"2e3c62496638332b"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:k,alt:"solved"})]})},_=s.p+"static/media/Hmain.a2fe6a4e.png",S=s.p+"static/media/Hlogin.da9bd624.png",N=s.p+"static/media/Htest.f7c05546.png",T=s.p+"static/media/Hsolved.b93ea042.png",M=function(){return Object(a.jsxs)("div",{children:[Object(a.jsx)("br",{}),Object(a.jsx)("h1",{children:"Microcorruption: Hanoi"}),"2021-03-02",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),'This challenge is different from the previous ones because solving it doesn\'t involve finding the "correct" password. This might seem confusing but it will become clear as we try to solve the challenge.',Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"As usual, let us start by checking the ",Object(a.jsx)("span",{id:"code",children:"main"})," ","function.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:_,alt:"main"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"It doesn't seem to have much going on. It just calls a"," ",Object(a.jsx)("span",{id:"code",children:"login"})," function and sets ",Object(a.jsx)("span",{id:"code",children:"r15"})," ","to 0 when it is done. It seems like we have to check"," ",Object(a.jsx)("span",{id:"code",children:"login"})," in order to understand what exactly the program is doing.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:S,alt:"login"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"The first part is pretty standard. It asks the user for a password and then stores it at memory address ",Object(a.jsx)("span",{id:"code",children:"0x2400"}),". What's interesting, however, is that it asks for a password between 8 and 16 characters. Keep that in mind because it will be important. Next, it calls a ",Object(a.jsx)("span",{id:"code",children:"test_password_valid"})," function and depending on the value of ",Object(a.jsx)("span",{id:"code",children:"r15"})," after it's executed it decides to skip instruction ",Object(a.jsx)("span",{id:"code",children:"0x445a"})," which sets memory address"," ",Object(a.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(a.jsx)("span",{id:"code",children:"0x17"})," or execute it.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Instruction ",Object(a.jsx)("span",{id:"code",children:"0x455a"})," compares the value at address"," ",Object(a.jsx)("span",{id:"code",children:"0x2410"})," with ",Object(a.jsx)("span",{id:"code",children:"0x28"}),", and depending on the result the door will either unlock or remain closed. In other words, our objective is to somehow change the value of"," ",Object(a.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(a.jsx)("span",{id:"code",children:"0x28"}),". Let's check"," ",Object(a.jsx)("span",{id:"code",children:"test_password_valid"})," for any clues that might help.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:N,alt:"test"}),Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"This function seems to do a lot less than I thought. The most interseting parts for to me were instructions ",Object(a.jsx)("span",{id:"code",children:"0x445c"})," and"," ",Object(a.jsx)("span",{id:"code",children:"0x4472"}),". It's just a very roundabout way of giving"," ",Object(a.jsx)("span",{id:"code",children:"r15"})," the value 0 and I'm not sure if it was just there to confuse players or there is more to it. Either way, after fiddling with it for a while and being unable to figure out what I'm supposed to make out of this function I decided to take a step back and focus on what I need to do.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"To open the door I just need to find a way to set the value of"," ",Object(a.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(a.jsx)("span",{id:"code",children:"0x28"}),". I know that the password I type will be stored at ",Object(a.jsx)("span",{id:"code",children:"0x2400"})," so I can modify the values from there to ",Object(a.jsx)("span",{id:"code",children:"0x240F"})," since the password should be 16 characters long...",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"Hold on a second! There are no instructions that check if the password I give is 16 characters long. In other words, all I have to do is"," ",Object(a.jsx)("span",{id:"keyword",children:"overflow"})," the input into the address I need by giving input larger than the expected size.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),"I tested the idea by giving a password of 18"," ",Object(a.jsx)("span",{id:"code",children:"0x28"})," and as I thought, it worked. This challenge was particularly fun because not only was it a good way to introduce the foundation for buffer overflows, but it also reminded me of how important it is for a hacker to think outside of the box and not be constrained by expected behavior.",Object(a.jsx)("br",{}),Object(a.jsx)("br",{}),Object(a.jsx)("img",{src:T,alt:"solved"})]})},W=s(2);var F=function(){return Object(a.jsx)("div",{className:"App",children:Object(a.jsxs)(o.a,{children:[Object(a.jsxs)("div",{id:"container",children:[Object(a.jsx)(d,{}),Object(a.jsx)(j,{}),Object(a.jsx)(W.a,{path:"/",exact:!0,render:function(e){return Object(a.jsx)("span",{id:"type",children:Object(a.jsx)(l,{})})}}),Object(a.jsx)(W.a,{path:"/Writeups",exact:!0,component:x}),Object(a.jsx)(W.a,{path:"/Writeups/Microcorruption-New-Orleans",component:w}),Object(a.jsx)(W.a,{path:"/Writeups/Microcorruption-Sydney",component:I}),Object(a.jsx)(W.a,{path:"/Writeups/Microcorruption-Hanoi",component:M})]}),Object(a.jsx)(p,{})]})})};s(30);n.a.render(Object(a.jsx)(c.a.StrictMode,{children:Object(a.jsx)(F,{})}),document.getElementById("root"))}},[[31,1,2]]]);
//# sourceMappingURL=main.51ed250c.chunk.js.map