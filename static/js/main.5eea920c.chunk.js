(this["webpackJsonpyassine-sebri"]=this["webpackJsonpyassine-sebri"]||[]).push([[0],{30:function(e,t,s){},31:function(e,t,s){"use strict";s.r(t);var i=s(1),r=s.n(i),o=s(14),n=s.n(o),a=s(4),c=s(0),d=function(){return Object(c.jsx)("header",{children:Object(c.jsxs)("nav",{children:[Object(c.jsx)(a.b,{to:"/",className:"underline",children:"/About"}),Object(c.jsx)(a.b,{to:"/Projects",className:"underline",children:"/Projects"}),Object(c.jsx)(a.b,{to:"/Blog",className:"underline",children:"/Blog"}),Object(c.jsx)("a",{href:"mailto:yassine.sebri@enetcom.u-sfax.tn ",className:"underline",children:"/Contact"})]})})},b=function(){return Object(c.jsx)("div",{className:"site-title",children:Object(c.jsxs)("h1",{children:["yassine@dev:$",Object(c.jsx)("span",{class:"cursor",children:"\u2588"})]})})},j=s(16),h=s.n(j),l=function(){return Object(c.jsx)(h.a,{options:{loop:!1,delay:65,autoStart:!0,cursor:"\u2588",strings:[""]},onInit:function(e){e.typeString("Hi! <br>").pauseFor(300).typeString(" I'm Yassine,").pauseFor(100).typeString(" a student,").pauseFor(100).typeString(" developer and hacker.<br/>").pauseFor(500).typeString("I love tinkering with different technologies and exploring their inner workings.<br/>").pauseFor(300).typeString("My interests include CTF challenges and competitive programming.<br/>").pauseFor(300).typeString("Feel free to check my work.<br/>")}})},p=function(){return Object(c.jsxs)("footer",{children:[Object(c.jsx)("a",{href:"https://www.linkedin.com/in/yassinesebri/",class:"svglink",target:"__blank",children:Object(c.jsx)("i",{class:"fab fa-linkedin"})}),Object(c.jsx)("a",{href:"https://github.com/Yassine-Sebri/",class:"svglink",target:"__blank",children:Object(c.jsx)("i",{class:"fab fa-github"})}),Object(c.jsx)("a",{href:"https://twitter.com/root0x03",class:"svglink",target:"__blank",children:Object(c.jsx)("i",{class:"fab fa-twitter"})}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"\xa9 Copyright 2021 - Yassine Sebri."]})},x=function(){return Object(c.jsxs)("div",{id:"Writeups",children:["2021-03-11 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Understanding-Docker-By-Writing-A-Custom-Container",className:"highlight",children:"Understanding Docker By Writing A Custom Container"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"2021-03-07 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Writing-A-Custom-Bootloader",className:"highlight",children:"Writing A Custom Bootloader"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"2021-03-04 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Reverse-Engineering-Camera-Firmware",className:"highlight",children:"Reverse-Engineering A Camera's Firmware"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"2021-03-02 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Microcorruption-Hanoi",className:"highlight",children:"Microcorruption: Hanoi"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"2021-03-01 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Microcorruption-Sydney",className:"highlight",children:"Microcorruption: Sydney"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"2021-02-28 -"," ",Object(c.jsx)(a.b,{to:"/Blog/Microcorruption-New-Orleans",className:"highlight",children:"Microcorruption: New Orleans"})]})},u=s.p+"static/media/NOmain.ae5582a9.png",m=s.p+"static/media/NOcreate.f20144c7.png",O=s.p+"static/media/NOcheck.4df114ba.png",g=s.p+"static/media/NOmemory.5e47a375.png",w=s.p+"static/media/NOsolved.79735ff6.png",f=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Microcorruption: New Orleans"}),"2021-02-28",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"This will be the first of a series of posts where I detail my answers to various"," ",Object(c.jsx)("a",{href:"https://microcorruption.com/",target:"__blank",children:"microcorruption"})," ","ctf challenges. The objective of these challenges is to unlock a device by reverse-engineering its code and exploiting its vulnerabilities. With that out of the way, let's get hacking!",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The first thing I did was set up a break point at"," ",Object(c.jsx)("span",{id:"code",children:"main"}),", since that's the entry point for our program.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:u,alt:"main"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"This code might seem intimidating if you aren't familiar with assembly, but it's actually quite simple. First, it calls a"," ",Object(c.jsx)("span",{id:"code",children:"create_password"})," function, then it prints a string with the ",Object(c.jsx)("span",{id:"code",children:"puts"})," function. Next, it gets a password from the user and checks if it's correct. Depending on the content of"," ",Object(c.jsx)("span",{id:"code",children:"r15"})," after ",Object(c.jsx)("span",{id:"code",children:"check_password"})," is executed, the door will either unlock or remain locked.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"First of all, Let's take a closer look at"," ",Object(c.jsx)("span",{id:"code",children:"create_password"}),", since it seems like a promising function.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:m,alt:"create_password"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The first instruction seems to be saving a hex number into"," ",Object(c.jsx)("span",{id:"code",children:"r15"})," which will act as a memory address, then it proceeds to move 8 bytes into memory address ",Object(c.jsx)("span",{id:"code",children:"0x2400"})," ","to ",Object(c.jsx)("span",{id:"code",children:"0x2407"}),". it's probably safe to assume that the program will compare this sequence of bytes to the password given by the user later on, but let's follow along for now.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:O,alt:"check_password"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"A quick read through ",Object(c.jsx)("span",{id:"code",children:"check_password"})," shows us that it follows the structure of a while loop, where"," ",Object(c.jsx)("span",{id:"code",children:"r14"})," acts as a counter starting from 0 till it reaches the value 8. ",Object(c.jsx)("span",{id:"code",children:"r14"})," will increment if the bytes at address ",Object(c.jsx)("span",{id:"code",children:"0x2400"})," previously set by the"," ",Object(c.jsx)("span",{id:"code",children:"create_password"})," function match the user input stored at the memory address in r13. if ",Object(c.jsx)("span",{id:"code",children:"r14"})," reaches 8, ",Object(c.jsx)("span",{id:"code",children:"r15"})," receives the value 1 which will then unlock the door.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Knowing that, we just have to enter the string stored"," ",Object(c.jsx)("span",{id:"code",children:"0x2400"})," to solve the challenge. We can copy the string using the Live Memory Dump window.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:g,alt:"Live Memory Dump"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Et voila! It was a pretty straightforward solution meant to familiarize newcomers with reading and understanding assembly code.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:w,alt:"Challenge solved"})]})},y=s.p+"static/media/Smain.95a7407e.png",k=s.p+"static/media/Scheck.e265bc37.png",v=s.p+"static/media/Ssolved.acc97ee8.png",I=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Microcorruption: Sydney"}),"2021-03-01",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"As usual, let's start by taking a look at the ",Object(c.jsx)("span",{id:"code",children:"main"})," ","function.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:y,alt:"main"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Unlike last time, there doesn't seem to be a"," ",Object(c.jsx)("span",{id:"code",children:"create_password"})," function, but the flow is pretty similar. First it gets a password from the user then it executes the"," ",Object(c.jsx)("span",{id:"code",children:"check_password"})," function, and depending on the value of ",Object(c.jsx)("span",{id:"code",children:"r15"})," after the execution it decides whether to open the lock or not. It seems that the"," ",Object(c.jsx)("span",{id:"code",children:"check_password"})," function is key in this whole thing, so let's check it out.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:k,alt:"check_password"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The ",Object(c.jsx)("span",{id:"code",children:"check_password"})," performs a series of comparisons between the values stored at an offset from memory address"," ",Object(c.jsx)("span",{id:"code",children:"r15"})," and a set of hexadecimal values. If the values match then ",Object(c.jsx)("span",{id:"code",children:"r15"})," would receive the value 1, fulfilling the condition for unlocking the door. The memory values stored at ",Object(c.jsx)("span",{id:"code",children:"r15"})," represent the password entered by the user, so all we have to do to solve the challenge is submit the hexadecimal values found in this function.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'Submitting the values as is won\'t solve the challenge, however. This challenge was probably designed to teach people about the concepts of "big endian" and "little endian". A big endian system stores the most significant byte of a word at the smallest memory address while a little endian system does the opposite. This might seem a bit confusing but it just means that if you give a 16 bit CPU that uses little endian a value of ',Object(c.jsx)("span",{id:"code",children:"0x4142"}),", for example, it will be stored in memory as ",Object(c.jsx)("span",{id:"code",children:"0x4241"}),".",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"So in order to solve the challenge, we have to invert the hexadecimal values in the ",Object(c.jsx)("span",{id:"code",children:"check_password"})," function two by two. So in this case the password would be (in hexadecimal)"," ",Object(c.jsx)("span",{id:"code",children:"2e3c62496638332b"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:v,alt:"solved"})]})},_=s.p+"static/media/Hmain.a2fe6a4e.png",T=s.p+"static/media/Hlogin.da9bd624.png",N=s.p+"static/media/Htest.f7c05546.png",C=s.p+"static/media/Hsolved.b93ea042.png",S=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Microcorruption: Hanoi"}),"2021-03-02",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'This challenge is different from the previous ones because solving it doesn\'t involve finding the "correct" password. This might seem confusing but it will become clear as we try to solve the challenge.',Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"As usual, let us start by checking the ",Object(c.jsx)("span",{id:"code",children:"main"})," ","function.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:_,alt:"main"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"It doesn't seem to have much going on. It just calls a"," ",Object(c.jsx)("span",{id:"code",children:"login"})," function and sets ",Object(c.jsx)("span",{id:"code",children:"r15"})," ","to 0 when it is done. It seems like we have to check"," ",Object(c.jsx)("span",{id:"code",children:"login"})," in order to understand what exactly the program is doing.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:T,alt:"login"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The first part is pretty standard. It asks the user for a password and then stores it at memory address ",Object(c.jsx)("span",{id:"code",children:"0x2400"}),". What's interesting, however, is that it asks for a password between 8 and 16 characters. Keep that in mind because it will be important. Next, it calls a ",Object(c.jsx)("span",{id:"code",children:"test_password_valid"})," function and depending on the value of ",Object(c.jsx)("span",{id:"code",children:"r15"})," after it's executed it decides to skip instruction ",Object(c.jsx)("span",{id:"code",children:"0x445a"})," which sets memory address"," ",Object(c.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(c.jsx)("span",{id:"code",children:"0x17"})," or execute it.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Instruction ",Object(c.jsx)("span",{id:"code",children:"0x455a"})," compares the value at address"," ",Object(c.jsx)("span",{id:"code",children:"0x2410"})," with ",Object(c.jsx)("span",{id:"code",children:"0x28"}),", and depending on the result the door will either unlock or remain closed. In other words, our objective is to somehow change the value of"," ",Object(c.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(c.jsx)("span",{id:"code",children:"0x28"}),". Let's check"," ",Object(c.jsx)("span",{id:"code",children:"test_password_valid"})," for any clues that might help.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:N,alt:"test"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"This function seems to do a lot less than I thought. The most interseting parts for to me were instructions ",Object(c.jsx)("span",{id:"code",children:"0x445c"})," and"," ",Object(c.jsx)("span",{id:"code",children:"0x4472"}),". It's just a very roundabout way of giving"," ",Object(c.jsx)("span",{id:"code",children:"r15"})," the value 0 and I'm not sure if it was just there to confuse players or there is more to it. Either way, after fiddling with it for a while and being unable to figure out what I'm supposed to make out of this function I decided to take a step back and focus on what I need to do.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"To open the door I just need to find a way to set the value of"," ",Object(c.jsx)("span",{id:"code",children:"0x2410"})," to ",Object(c.jsx)("span",{id:"code",children:"0x28"}),". I know that the password I type will be stored at ",Object(c.jsx)("span",{id:"code",children:"0x2400"})," so I can modify the values from there to ",Object(c.jsx)("span",{id:"code",children:"0x240F"})," since the password should be 16 characters long...",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Hold on a second! There are no instructions that check if the password I give is 16 characters long. In other words, all I have to do is"," ",Object(c.jsx)("span",{id:"keyword",children:"overflow"})," the input into the address I need by giving input larger than the expected size.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"I tested the idea by giving a password of 18"," ",Object(c.jsx)("span",{id:"code",children:"0x28"})," and as I thought, it worked. This challenge was particularly fun because not only was it a good way to introduce the foundation for buffer overflows, but it also reminded me of how important it is for a hacker to think outside of the box and not be constrained by expected behavior.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:C,alt:"solved"})]})},A=s.p+"static/media/RECFZIP.00b29b14.png",W=s.p+"static/media/RECFread.fdecaac1.png",E=s.p+"static/media/RECFbin.033e7dba.png",F=s.p+"static/media/RECFdd.7e1e25da.png",L=s.p+"static/media/RECFlzma.f1cf303c.png",B=s.p+"static/media/RECFbin2.52c34a0f.png",M=s.p+"static/media/RECFlzma2.8490c22d.png",R=s.p+"static/media/RECFcpio.2a918efd.png",U=s.p+"static/media/RECFfs.cd304991.png",P=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Reverse-Engineering A Camera's Firmware"}),"2021-03-04",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"I decided to get into reverse engineering firmware in order to understand how low level components work a bit better. In case you don't know what firmware is, it's a special piece of software that dictates how hardware works. Without firmware, hardware would just be a an assemblage of electronic components lacking purpose.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"To get started, I downloaded the firmware of an old D-Link camera. If you want to follow along, you can download the firmware"," ",Object(c.jsx)("a",{href:"http://legacyfiles.us.dlink.com/DCS-932L/REVA/FIRMWARE/DCS-932L_REVA_FIRMWARE_1.14.04.ZIP",children:"here"}),". With that out of the way, let us get started.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The first step is to unzip the file we have. It seems to contain a pdf file and .bin file.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:A,alt:"Unzipping"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"A quick look at the binary file tells us that it's not human-readable. We can use the ",Object(c.jsx)("span",{id:"keyword",children:"strings"})," command to extract redable words but that won't get us far. We need to find a different method in order to extract information.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:W,alt:"Binary file"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"This is where"," ",Object(c.jsx)("a",{href:"https://github.com/ReFirmLabs/binwalk",target:"__blank",children:"binkwalk"})," ","comes in. It's a fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images. It will parse the file and return a table of content based on what it finds. Let's try running it against our binary.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:E,alt:"binwalk output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"It seems we were able to get some pretty useful information. At"," ",Object(c.jsx)("span",{id:"code",children:"0x19F70"})," sits a U-Boot string. U-Boot is a popular, open-source bootloader used in embedded devices. A bootloader's job is to load the OS when the device is turned on. At"," ",Object(c.jsx)("span",{id:"code",children:"0x50000"})," we can find the uImage header which contains useful information. This camera seems to use a MIPS CPU and use Linux as an OS. The kernel image uses LZMA compression and it starts at"," ",Object(c.jsx)("span",{id:"code",children:"0x50040"}),". Let's try extracting it!",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"To do that, we will use the ",Object(c.jsx)("span",{id:"keyword",children:"dd"})," command.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:F,alt:"dd"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The ",Object(c.jsx)("span",{id:"keyword",children:"if"})," option stands for input file. The"," ",Object(c.jsx)("span",{id:"keyword",children:"skip"})," option allows you to specify which byte you want to start copying from and ",Object(c.jsx)("span",{id:"keyword",children:"of"})," stands for output file. You probably noticed that I skipped the"," ",Object(c.jsx)("span",{id:"keyword",children:"bs"})," option (which stands for block size) and that's because it would take a while to explain. If you're curious you can just google it but it's not very important for our purposes here. We can check the output file with the ",Object(c.jsx)("span",{id:"keyword",children:"file"})," command and it confirms that it is indeed LZMA compressed data.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Next, we should unpack the output file with the"," ",Object(c.jsx)("span",{id:"keyword",children:"unlzma"})," command.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:L,alt:"unlzma"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"It seems that the decompressed file might be another binary, so let's use binwalk to check it out.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:B,alt:"binwalk output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"We learn that the camera is using Linux kernel version 2.6, which was released around 15 years ago, even though the image itself is relatively recent. This means that it could potentially be vulnerable to tons of kernel exploits that have been discovered over the years. There is also more LZMA compressed data so let's extract it.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:M,alt:"unlzma"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"It seems we found a cpio archive. Let's extract it!",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:R,alt:"extract cpio archive"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"You can find what these options do with a simple"," ",Object(c.jsx)("span",{id:"keyword",children:"man"})," but I think I should mention that the most critical one is ",Object(c.jsx)("span",{id:"keyword",children:"--no-absolute-filenames"})," because without it you might risk overwriting your root directory.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Et voila! We were able to extract the file system from the firmware, giving us a better chance to understand how exactly this camera works.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:U,alt:"Linux filesystem"})]})},z=s.p+"static/media/vim.accdac26.png",D=s.p+"static/media/nasm.85950c13.png",H=s.p+"static/media/hexdump.761eceee.png",q=s.p+"static/media/qemu.b1e594cd.png",Y=s.p+"static/media/vim2.7180c3f6.png",Z=s.p+"static/media/qemu2.1ab8ab75.png",V=s.p+"static/media/vim3.7cfa02ad.png",K=s.p+"static/media/qemu3.d6883493.png",Q=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Writing a Custom Bootloader"}),"2021-03-07",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"So I've been planning on writing my own operating system for a while and I think now that I understand the basics of how it all works I should try doing it. It probably won't be easy but hopefully by the end of it I will have a better understanding of how computers do their magic.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Anyway, why did I decide that a bootloader should be the first software I write if I'm going to create an OS? That's because a bootloader is the first program loaded into memory by the BIOS when you boot up a computer. It's the bootloader's job to help the computer find the operating system, though in most cases it just loads a second bootloader because the first one is very limited in size (512 bytes only).",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"We're going to write the program in assembly so we need a tool to translate our instructions to opcode, and"," ",Object(c.jsx)("a",{href:"https://www.nasm.us/",target:"__blank",children:"NASM"})," ","is perfect for that. We're also using"," ",Object(c.jsx)("a",{href:"https://www.qemu.org/",target:"__blank",children:"QEMU"})," ","to emulate the booting process. With that out of the way, let's try creating our bootloader.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:z,alt:"Bootloader code"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The first thing to do is to make sure that creates code for a CPU in 16 bits mode because all x86 CPUs start in 16 bits mode when reset. The next piece of code is what the CPU is going to execute after the bootloader is loaded in memory. In this case, it's an infinite loop that won't do anything but we'll change that eventually.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Line 8 pads the program with 0s till it reaches byte 510. It does that because our bootloader needs to be 512 bytes in size and end with"," ",Object(c.jsx)("span",{id:"code",children:"0x55aa"}),". The reason why it's"," ",Object(c.jsx)("span",{id:"code",children:"0xaa55"})," in code is that x86 CPUs use little endian notation, so they have to be inversed.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:D,alt:"nasm"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'Next we "compile" our code with NASM like so. The'," ",Object(c.jsx)("span",{id:"keyword",children:"-f bin"})," option instructs NASM to produce raw machine code rather than a package for linking. We can check the output using the ",Object(c.jsx)("span",{id:"keyword",children:"hexdump"})," command.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:H,alt:"hexdump"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The file is exaclty what we need it to be. Let's try runnning it using QEMU.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:q,alt:"qemu"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Seems like our binary is working as expected, but It's not doing much. Let's try making it print some text. To do that we will use a"," ",Object(c.jsx)("a",{href:"https://en.wikipedia.org/wiki/BIOS_interrupt_call",target:"__blank",children:"BIOS interrupt call"})," ","as follows.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:Y,alt:"Interrupt call"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'We "compile" our code and run it in QEMU. As we can see, we were able to print a character on screen.',Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:Z,alt:"qemu"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Now, let's try something more complicated, like printing some ASCII art on boot. To do that we will need to use more"," ",Object(c.jsx)("a",{href:"https://en.wikipedia.org/wiki/INT_10H",target:"__blank",children:"INT 10H"})," ","functions.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:V,alt:"final program"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),'And done! Now we just have to "compile" our code and run it on QEMU.',Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:K,alt:"final product"})]})},J=s.p+"static/media/fork.41ee94bd.png",G=s.p+"static/media/pid1.be608a8b.png",$=s.p+"static/media/pid2.8acd8483.png",X=s.p+"static/media/pstree.fb9a43c7.png",ee=s.p+"static/media/pidns.dfab8ddb.png",te=s.p+"static/media/pid3.9dedfa4d.png",se=s.p+"static/media/pid4.937bd468.png",ie=s.p+"static/media/shell.33f8e18c.png",re=s.p+"static/media/ps.77e457ef.png",oe=s.p+"static/media/mount.8a39ea8e.png",ne=s.p+"static/media/shell2.712d1cc6.png",ae=s.p+"static/media/shell3.fdf2c77e.png",ce=s.p+"static/media/shell4.4daabcce.png",de=function(){return Object(c.jsxs)("div",{children:[Object(c.jsx)("br",{}),Object(c.jsx)("h1",{children:"Understanding Docker by Writing a Custom Container"}),"2021-03-11",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"I've been playing around with Docker for the past of days. It's an interesting technology because of how versatile it is, with its use cases ranging from application building and deployement to CTF challenges. But how does it work exactly?",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("a",{href:"https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w",target:"__blank",children:"LiveOverflow"})," ","made an excellent"," ",Object(c.jsx)("a",{href:"https://youtu.be/-YnMr1lj4Z8",target:"__blank",children:"video"})," ","on the topic, and I suggest you go watch it in case you're not familiar with containerization. The gist of it, however, is that a container is just a fancy word for an application that makes use of the Linux kernel functionalities, mainly"," ",Object(c.jsx)("a",{href:"https://man7.org/linux/man-pages/man7/namespaces.7.html",target:"__blank",children:"namespaces"}),".",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"You can think of a namespace as a way to isolate processes. In more technical terms, processes within a namespace seem to have their own instance of resources. There are 8 types of namespaces:"," ",Object(c.jsx)("span",{id:"keyword",children:"Cgroup"}),", ",Object(c.jsx)("span",{id:"keyword",children:"IPC"}),","," ",Object(c.jsx)("span",{id:"keyword",children:"Network"}),", ",Object(c.jsx)("span",{id:"keyword",children:"Mount"}),","," ",Object(c.jsx)("span",{id:"keyword",children:"PID"}),", ",Object(c.jsx)("span",{id:"keyword",children:"Time"}),","," ",Object(c.jsx)("span",{id:"keyword",children:"User"})," and ",Object(c.jsx)("span",{id:"keyword",children:"UTS"}),". With that, introductions are over. Let's write some code!",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:J,alt:"testing clone"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"We're going to use the"," ",Object(c.jsx)("a",{target:"blank",href:"https://man7.org/linux/man-pages/man2/clone.2.html",children:"clone"})," ",'syscall to interact with the namespace API, so it would be a good idea to demonstrate how it works under "normal" circumstances before diving deeper. What the program does is pretty simple: it prints out its'," ",Object(c.jsx)("span",{id:"keyword",children:"pid"})," then it clones the"," ",Object(c.jsx)("span",{id:"keyword",children:"print_pid"})," function into a child process and prints its ",Object(c.jsx)("span",{id:"keyword",children:"pid"}),". Let's execute it.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:G,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Hooray! We were able to clone the ",Object(c.jsx)("span",{id:"keyword",children:"print_pid"})," ","function into a child process. We can also visualize this by making the child function sleep for some time, setting the flag to"," ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_VFORK"})," in the clone function so the parent process is suspended, then using the ",Object(c.jsx)("span",{id:"keyword",children:"pstree"})," ","command.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:$,alt:"output"}),Object(c.jsx)("img",{src:X,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"In case you didn't know, that's how all processes in Linux are created. There is a process called the ",Object(c.jsx)("span",{id:"keyword",children:"init"})," process, which is started during the bootup process, that forks and clones itself to create other processes that, in turn, do the same thing. Pretty neat, huh? But let's not get ahead of ourselves. The point of all of this is to demonstrate how namespaces work, so let us get started.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:ee,alt:"testing pid namespace"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"As you can see, the program is almost the same. The only difference is that this time, I set the ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_NEWPID"})," flag. Now, we just need to execute it.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:te,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Seems like the clone function wasn't executed. The reason for that is explained in the"," ",Object(c.jsx)("a",{target:"blank",href:"https://man7.org/linux/man-pages/man2/clone.2.html",children:"clone"})," ","documentation: Only a ",Object(c.jsx)("span",{id:"keyword",children:"privileged"})," process can employ ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_NEWNS"}),". Let's try executing it again, but this time with root privileges.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:se,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"And it worked! We were successfully able to isolate the child process into a new PID namespace. Now, let us upgrade it into an interactive shell.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:ie,alt:"shell code"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The code is pretty simple: the ",Object(c.jsx)("span",{id:"keyword",children:"shell"})," function uses a ",Object(c.jsx)("span",{children:"system"})," syscall to call the"," ",Object(c.jsx)("span",{id:"keyword",children:"zsh"})," binary, which should result in an interactive shell. I also added the ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_VFORK"})," ","flag so that the program is suspended till I exit the shell.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:re,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The program was successful, but for some reason the process wasn't isolated in a PID namespace, at least that's what it looks like. Truth of the matter is that the ",Object(c.jsx)("span",{id:"keyword",children:"ps"})," command works by reading the files in the ",Object(c.jsx)("span",{id:"keyword",children:"proc filesystem"}),". So in order to see the PID subtree of the new namespace, we need to remount it after cloning the process. This means we would also need to use the mount namespace so we don't overwrite our original namespace. The flag for that is ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_NEWNS"}),".",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:oe,alt:""}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"The ",Object(c.jsx)("span",{id:"keyword",children:"shell"})," function will mount the proc file system when it's being executed, then after we're done with our shell we remount the proc filesystem back into the host. This probably isn't the best way to do this, but it's the only solution I could think of. If you have an idea about how to improve it, please do tell me.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Anyway, we should now be able to see our isolated processes.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:ne,alt:""}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Great! Now we're one step closer to developing a full container.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"You probably already noticed that there is one glaring security issue with this setup. The processes spanwned within the namespaces we created share the same root mount as the host. This is extremely problematic, as any application within the container can read, write and execute any files within the host.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"You're probably thinking \"why don't we just change the root mount for the child process?\" and the answer is it's not that simple. If we're going to isolate the child process, then we need to provided the resources needed for its functions, such as binaries. The best way to do that is to use another root filesystem as a root mount.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"I decided to use"," ",Object(c.jsx)("a",{target:"__blank",href:"https://alpinelinux.org/downloads/",children:"Alpine Linux"})," ","for this. It's simple, lightweight, and secure. We will also need to use"," ",Object(c.jsx)("a",{target:"__blank",href:"https://man7.org/linux/man-pages/man2/pivot_root.2.html",children:"pivot_root"})," ","to change the root directory for the child process.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:ae,alt:""}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"It took me some time to figure out how pivot_root works, but I eventually did. First, you have to make sure that the new root directory is on a"," ",Object(c.jsx)("span",{id:"keyword",children:"different mount"})," from the current root. We do that by mount binding the new root directory. Next, we create a directory inside of the new mount. Now we can perform the"," ",Object(c.jsx)("span",{id:"keyword",children:"pivot_root"})," syscall to change the root directory of our new process. Finally, we chdir into / and detach the old directory from the mount to prevent the process from leaving the jail.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"Notice how I also added the ",Object(c.jsx)("span",{id:"keyword",children:"CLONE_NEWUSER"})," flag because if I don't the process would still be running as the root of the original user namespace and that could cause problems. I can also safely mount the ",Object(c.jsx)("span",{id:"keyword",children:"proc filesystem"})," since this process uses a different mount root. Now, let's try running it.",Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),Object(c.jsx)("img",{src:ce,alt:"output"}),Object(c.jsx)("br",{}),Object(c.jsx)("br",{}),"And done! We were able to create an (almost) isolated space to run our applications while still making use of the same kernel. There is obviously obviously more that goes into docker containers to ensure functionalities such as networking, but the principle is the same. At the end of the day, it's just making use of the namespaces provided by the Linux kernel."]})},be=s(2);var je=function(){return Object(c.jsx)("div",{className:"App",children:Object(c.jsxs)(a.a,{children:[Object(c.jsxs)("div",{id:"container",children:[Object(c.jsx)(d,{}),Object(c.jsx)(b,{}),Object(c.jsx)(be.a,{path:"/",exact:!0,render:function(e){return Object(c.jsx)("span",{id:"type",children:Object(c.jsx)(l,{})})}}),Object(c.jsx)(be.a,{path:"/Blog",exact:!0,component:x}),Object(c.jsx)(be.a,{path:"/Blog/Microcorruption-New-Orleans",component:f}),Object(c.jsx)(be.a,{path:"/Blog/Microcorruption-Sydney",component:I}),Object(c.jsx)(be.a,{path:"/Blog/Microcorruption-Hanoi",component:S}),Object(c.jsx)(be.a,{path:"/Blog/Reverse-Engineering-Camera-Firmware",component:P}),Object(c.jsx)(be.a,{path:"/Blog/Writing-A-Custom-Bootloader",component:Q}),Object(c.jsx)(be.a,{path:"/Blog/Understanding-Docker-By-Writing-A-Custom-Container",component:de})]}),Object(c.jsx)(p,{})]})})};s(30);n.a.render(Object(c.jsx)(r.a.StrictMode,{children:Object(c.jsx)(je,{})}),document.getElementById("root"))}},[[31,1,2]]]);
//# sourceMappingURL=main.5eea920c.chunk.js.map