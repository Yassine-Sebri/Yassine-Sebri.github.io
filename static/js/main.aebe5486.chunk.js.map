{"version":3,"sources":["components/Header.js","components/Title.js","components/Writer.js","components/Footer.js","components/Blog.js","components/Blog/img/NOmain.png","components/Blog/img/NOcreate.png","components/Blog/img/NOcheck.png","components/Blog/img/NOmemory.png","components/Blog/img/NOsolved.png","components/Blog/MCNO.js","components/Blog/img/Smain.png","components/Blog/img/Scheck.png","components/Blog/img/Ssolved.png","components/Blog/MCS.js","components/Blog/img/Hmain.png","components/Blog/img/Hlogin.png","components/Blog/img/Htest.png","components/Blog/img/Hsolved.png","components/Blog/MCH.js","components/Blog/img/RECFZIP.png","components/Blog/img/RECFread.png","components/Blog/img/RECFbin.png","components/Blog/img/RECFdd.png","components/Blog/img/RECFlzma.png","components/Blog/img/RECFbin2.png","components/Blog/img/RECFlzma2.png","components/Blog/img/RECFcpio.png","components/Blog/img/RECFfs.png","components/Blog/RECF.js","App.js","index.js"],"names":["Header","to","className","href","Title","class","App","options","loop","delay","autoStart","cursor","strings","onInit","typewriter","typeString","pauseFor","Footer","target","Writeups","id","MCNO","src","main","alt","create","check","memory","solved","MCS","MCH","login","test","RECF","RECFZIP","RECFread","RECFbin","RECFdd","RECFlzma","RECFbin2","RECFlzma2","RECFcpio","RECFfs","path","exact","render","props","Writer","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aebe5486.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <header>\n      <nav>\n        <Link to=\"/\" className=\"underline\">\n          /About\n        </Link>\n        <Link to=\"/Projects\" className=\"underline\">\n          /Projects\n        </Link>\n        <Link to=\"/Blog\" className=\"underline\">\n          /Blog\n        </Link>\n        <a href=\"mailto:yassine.sebri@enetcom.u-sfax.tn \" className=\"underline\">\n          /Contact\n        </a>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","const Title = () => {\n    return (\n        <div className=\"site-title\">\n            <h1>yassine@dev:$\n                <span class=\"cursor\">█</span>\n            </h1>\n        </div>\n    )\n}\n\nexport default Title;\n","import Typewriter from \"typewriter-effect\";\n\nconst App = () => {\n  return (\n    <Typewriter\n      options={{\n        loop: false,\n        delay: 65,\n        autoStart: true,\n        cursor: \"█\",\n        strings: [\"\"],\n      }}\n      onInit={(typewriter) => {\n        typewriter\n          .typeString(\"Hi! <br>\")\n          .pauseFor(300)\n          .typeString(\" I'm Yassine,\")\n          .pauseFor(100)\n          .typeString(\" a student,\")\n          .pauseFor(100)\n          .typeString(\" developer and hacker.<br/>\")\n          .pauseFor(500)\n          .typeString(\n            \"I love tinkering with different technologies and exploring their inner workings.<br/>\"\n          )\n          .pauseFor(300)\n          .typeString(\n            \"My interests include CTF challenges and competitive programming.<br/>\"\n          )\n          .pauseFor(300)\n          .typeString(\"Feel free to check my work.<br/>\");\n      }}\n    />\n  );\n};\n\nexport default App;\n","const Footer = () => {\n  return (\n    <footer>\n      <a\n        href=\"https://www.linkedin.com/in/yassinesebri/\"\n        class=\"svglink\"\n        target=\"__blank\"\n      >\n        <i class=\"fab fa-linkedin\"></i>\n      </a>\n      <a\n        href=\"https://github.com/Yassine-Sebri/\"\n        class=\"svglink\"\n        target=\"__blank\"\n      >\n        <i class=\"fab fa-github\"></i>\n      </a>\n      <a href=\"https://twitter.com/root0x03\" class=\"svglink\" target=\"__blank\">\n        <i class=\"fab fa-twitter\"></i>\n      </a>\n      <br />\n      <br />© Copyright 2021 - Yassine Sebri.\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { Link } from \"react-router-dom\";\n\nconst Writeups = () => {\n  return (\n    <div id=\"Writeups\">\n      2021-03-04 -{\" \"}\n      <Link\n        to=\"/Blog/Reverse-Engineering-Camera-Firmware\"\n        className=\"highlight\"\n      >\n        Reverse-Engineering A Camera's Firmware\n      </Link>\n      <br />\n      <br />\n      2021-03-02 -{\" \"}\n      <Link to=\"/Blog/Microcorruption-Hanoi\" className=\"highlight\">\n        Microcorruption: Hanoi\n      </Link>\n      <br />\n      <br />\n      2021-03-01 -{\" \"}\n      <Link to=\"/Blog/Microcorruption-Sydney\" className=\"highlight\">\n        Microcorruption: Sydney\n      </Link>\n      <br />\n      <br />\n      2021-02-28 -{\" \"}\n      <Link to=\"/Blog/Microcorruption-New-Orleans\" className=\"highlight\">\n        Microcorruption: New Orleans\n      </Link>\n    </div>\n  );\n};\n\nexport default Writeups;\n","export default __webpack_public_path__ + \"static/media/NOmain.ae5582a9.png\";","export default __webpack_public_path__ + \"static/media/NOcreate.f20144c7.png\";","export default __webpack_public_path__ + \"static/media/NOcheck.4df114ba.png\";","export default __webpack_public_path__ + \"static/media/NOmemory.5e47a375.png\";","export default __webpack_public_path__ + \"static/media/NOsolved.79735ff6.png\";","import main from \"./img/NOmain.png\";\nimport create from \"./img/NOcreate.png\";\nimport check from \"./img/NOcheck.png\";\nimport memory from \"./img/NOmemory.png\";\nimport solved from \"./img/NOsolved.png\";\n\nconst MCNO = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: New Orleans</h1>\n      2021-02-28\n      <br />\n      <br />\n      This will be the first of a series of posts where I detail my answers to\n      various{\" \"}\n      <a href=\"https://microcorruption.com/\" target=\"__blank\">\n        microcorruption\n      </a>{\" \"}\n      ctf challenges. The objective of these challenges is to unlock a device by\n      reverse-engineering its code and exploiting its vulnerabilities. With that\n      out of the way, let's get hacking!\n      <br />\n      <br />\n      The first thing I did was set up a break point at{\" \"}\n      <span id=\"code\">main</span>, since that's the entry point for our program.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      This code might seem intimidating if you aren't familiar with assembly,\n      but it's actually quite simple. First, it calls a{\" \"}\n      <span id=\"code\">create_password</span> function, then it prints a string\n      with the <span id=\"code\">puts</span> function. Next, it gets a password\n      from the user and checks if it's correct. Depending on the content of{\" \"}\n      <span id=\"code\">r15</span> after <span id=\"code\">check_password</span> is\n      executed, the door will either unlock or remain locked.\n      <br />\n      <br />\n      First of all, Let's take a closer look at{\" \"}\n      <span id=\"code\">create_password</span>, since it seems like a promising\n      function.\n      <br />\n      <br />\n      <img src={create} alt=\"create_password\" />\n      <br />\n      <br />\n      The first instruction seems to be saving a hex number into{\" \"}\n      <span id=\"code\">r15</span> which will act as a memory address, then it\n      proceeds to move 8 bytes into memory address <span id=\"code\">0x2400</span>{\" \"}\n      to <span id=\"code\">0x2407</span>. it's probably safe to assume that the\n      program will compare this sequence of bytes to the password given by the\n      user later on, but let's follow along for now.\n      <br />\n      <br />\n      <img src={check} alt=\"check_password\" />\n      <br />\n      <br />A quick read through <span id=\"code\">check_password</span> shows us\n      that it follows the structure of a while loop, where{\" \"}\n      <span id=\"code\">r14</span> acts as a counter starting from 0 till it\n      reaches the value 8. <span id=\"code\">r14</span> will increment if the\n      bytes at address <span id=\"code\">0x2400</span> previously set by the{\" \"}\n      <span id=\"code\">create_password</span> function match the user input\n      stored at the memory address in r13. if <span id=\"code\">r14</span> reaches\n      8, <span id=\"code\">r15</span> receives the value 1 which will then unlock\n      the door.\n      <br />\n      <br />\n      Knowing that, we just have to enter the string stored{\" \"}\n      <span id=\"code\">0x2400</span> to solve the challenge. We can copy the\n      string using the Live Memory Dump window.\n      <br />\n      <br />\n      <img src={memory} alt=\"Live Memory Dump\" />\n      <br />\n      <br />\n      Et voila! It was a pretty straightforward solution meant to familiarize\n      newcomers with reading and understanding assembly code.\n      <br />\n      <br />\n      <img src={solved} alt=\"Challenge solved\" />\n    </div>\n  );\n};\n\nexport default MCNO;\n","export default __webpack_public_path__ + \"static/media/Smain.95a7407e.png\";","export default __webpack_public_path__ + \"static/media/Scheck.e265bc37.png\";","export default __webpack_public_path__ + \"static/media/Ssolved.acc97ee8.png\";","import main from \"./img/Smain.png\";\nimport check from \"./img/Scheck.png\";\nimport solved from \"./img/Ssolved.png\";\n\nconst MCS = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: Sydney</h1>\n      2021-03-01\n      <br />\n      <br />\n      As usual, let's start by taking a look at the <span id=\"code\">\n        main\n      </span>{\" \"}\n      function.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      Unlike last time, there doesn't seem to be a{\" \"}\n      <span id=\"code\">create_password</span> function, but the flow is pretty\n      similar. First it gets a password from the user then it executes the{\" \"}\n      <span id=\"code\">check_password</span> function, and depending on the value\n      of <span id=\"code\">r15</span> after the execution it decides whether to\n      open the lock or not. It seems that the{\" \"}\n      <span id=\"code\">check_password</span> function is key in this whole thing,\n      so let's check it out.\n      <br />\n      <br />\n      <img src={check} alt=\"check_password\" />\n      <br />\n      <br />\n      The <span id=\"code\">check_password</span> performs a series of comparisons\n      between the values stored at an offset from memory address{\" \"}\n      <span id=\"code\">r15</span> and a set of hexadecimal values. If the values\n      match then <span id=\"code\">r15</span> would receive the value 1,\n      fulfilling the condition for unlocking the door. The memory values stored\n      at <span id=\"code\">r15</span> represent the password entered by the user,\n      so all we have to do to solve the challenge is submit the hexadecimal\n      values found in this function.\n      <br />\n      <br />\n      Submitting the values as is won't solve the challenge, however. This\n      challenge was probably designed to teach people about the concepts of \"big\n      endian\" and \"little endian\". A big endian system stores the most\n      significant byte of a word at the smallest memory address while a little\n      endian system does the opposite. This might seem a bit confusing but it\n      just means that if you give a 16 bit CPU that uses little endian a value\n      of <span id=\"code\">0x4142</span>, for example, it will be stored in memory\n      as <span id=\"code\">0x4241</span>.\n      <br />\n      <br />\n      So in order to solve the challenge, we have to invert the hexadecimal\n      values in the <span id=\"code\">check_password</span> function two by two.\n      So in this case the password would be (in hexadecimal){\" \"}\n      <span id=\"code\">2e3c62496638332b</span>\n      <br />\n      <br />\n      <img src={solved} alt=\"solved\" />\n    </div>\n  );\n};\n\nexport default MCS;\n","export default __webpack_public_path__ + \"static/media/Hmain.a2fe6a4e.png\";","export default __webpack_public_path__ + \"static/media/Hlogin.da9bd624.png\";","export default __webpack_public_path__ + \"static/media/Htest.f7c05546.png\";","export default __webpack_public_path__ + \"static/media/Hsolved.b93ea042.png\";","import main from \"./img/Hmain.png\";\nimport login from \"./img/Hlogin.png\";\nimport test from \"./img/Htest.png\";\nimport solved from \"./img/Hsolved.png\";\n\nconst MCH = () => {\n  return (\n    <div>\n      <br />\n      <h1>Microcorruption: Hanoi</h1>\n      2021-03-02\n      <br />\n      <br />\n      This challenge is different from the previous ones because solving it\n      doesn't involve finding the \"correct\" password. This might seem confusing\n      but it will become clear as we try to solve the challenge.\n      <br />\n      <br />\n      As usual, let us start by checking the <span id=\"code\">main</span>{\" \"}\n      function.\n      <br />\n      <br />\n      <img src={main} alt=\"main\" />\n      <br />\n      <br />\n      It doesn't seem to have much going on. It just calls a{\" \"}\n      <span id=\"code\">login</span> function and sets <span id=\"code\">r15</span>{\" \"}\n      to 0 when it is done. It seems like we have to check{\" \"}\n      <span id=\"code\">login</span> in order to understand what exactly the\n      program is doing.\n      <br />\n      <br />\n      <img src={login} alt=\"login\" />\n      <br />\n      <br />\n      The first part is pretty standard. It asks the user for a password and\n      then stores it at memory address <span id=\"code\">0x2400</span>. What's\n      interesting, however, is that it asks for a password between 8 and 16\n      characters. Keep that in mind because it will be important. Next, it calls\n      a <span id=\"code\">test_password_valid</span> function and depending on the\n      value of <span id=\"code\">r15</span> after it's executed it decides to skip\n      instruction <span id=\"code\">0x445a</span> which sets memory address{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x17</span> or execute\n      it.\n      <br />\n      <br />\n      Instruction <span id=\"code\">0x455a</span> compares the value at address{\" \"}\n      <span id=\"code\">0x2410</span> with <span id=\"code\">0x28</span>, and\n      depending on the result the door will either unlock or remain closed. In\n      other words, our objective is to somehow change the value of{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x28</span>. Let's check{\" \"}\n      <span id=\"code\">test_password_valid</span> for any clues that might help.\n      <br />\n      <br />\n      <img src={test} alt=\"test\" />\n      <br />\n      <br />\n      This function seems to do a lot less than I thought. The most interseting\n      parts for to me were instructions <span id=\"code\">0x445c</span> and{\" \"}\n      <span id=\"code\">0x4472</span>. It's just a very roundabout way of giving{\" \"}\n      <span id=\"code\">r15</span> the value 0 and I'm not sure if it was just\n      there to confuse players or there is more to it. Either way, after\n      fiddling with it for a while and being unable to figure out what I'm\n      supposed to make out of this function I decided to take a step back and\n      focus on what I need to do.\n      <br />\n      <br />\n      To open the door I just need to find a way to set the value of{\" \"}\n      <span id=\"code\">0x2410</span> to <span id=\"code\">0x28</span>. I know that\n      the password I type will be stored at <span id=\"code\">0x2400</span> so I\n      can modify the values from there to <span id=\"code\">0x240F</span> since\n      the password should be 16 characters long...\n      <br />\n      <br />\n      Hold on a second! There are no instructions that check if the password I\n      give is 16 characters long. In other words, all I have to do is{\" \"}\n      <span id=\"keyword\">overflow</span> the input into the address I need by\n      giving input larger than the expected size.\n      <br />\n      <br />I tested the idea by giving a password of 18{\" \"}\n      <span id=\"code\">0x28</span> and as I thought, it worked. This challenge\n      was particularly fun because not only was it a good way to introduce the\n      foundation for buffer overflows, but it also reminded me of how important\n      it is for a hacker to think outside of the box and not be constrained by\n      expected behavior.\n      <br />\n      <br />\n      <img src={solved} alt=\"solved\" />\n    </div>\n  );\n};\n\nexport default MCH;\n","export default __webpack_public_path__ + \"static/media/RECFZIP.00b29b14.png\";","export default __webpack_public_path__ + \"static/media/RECFread.fdecaac1.png\";","export default __webpack_public_path__ + \"static/media/RECFbin.033e7dba.png\";","export default __webpack_public_path__ + \"static/media/RECFdd.7e1e25da.png\";","export default __webpack_public_path__ + \"static/media/RECFlzma.f1cf303c.png\";","export default __webpack_public_path__ + \"static/media/RECFbin2.52c34a0f.png\";","export default __webpack_public_path__ + \"static/media/RECFlzma2.8490c22d.png\";","export default __webpack_public_path__ + \"static/media/RECFcpio.2a918efd.png\";","export default __webpack_public_path__ + \"static/media/RECFfs.cd304991.png\";","import RECFZIP from \"./img/RECFZIP.png\";\nimport RECFread from \"./img/RECFread.png\";\nimport RECFbin from \"./img/RECFbin.png\";\nimport RECFdd from \"./img/RECFdd.png\";\nimport RECFlzma from \"./img/RECFlzma.png\";\nimport RECFbin2 from \"./img/RECFbin2.png\";\nimport RECFlzma2 from \"./img/RECFlzma2.png\";\nimport RECFcpio from \"./img/RECFcpio.png\";\nimport RECFfs from \"./img/RECFfs.png\";\n\nconst RECF = () => {\n  return (\n    <div>\n      <br />\n      <h1>Reverse-Engineering A Camera's Firmware</h1>\n      2021-03-04\n      <br />\n      <br />I decided to get into reverse engineering firmware in order to\n      understand how low level components work a bit better. In case you don't\n      know what firmware is, it's a special piece of software that dictates how\n      hardware works. Without firmware, hardware would just be a an assemblage\n      of electronic components lacking purpose.\n      <br />\n      <br />\n      To get started, I downloaded the firmware of an old D-Link camera. If you\n      want to follow along, you can download the firmware{\" \"}\n      <a href=\"http://legacyfiles.us.dlink.com/DCS-932L/REVA/FIRMWARE/DCS-932L_REVA_FIRMWARE_1.14.04.ZIP\">\n        here\n      </a>\n      . With that out of the way, let us get started.\n      <br />\n      <br />\n      The first step is to unzip the file we have. It seems to contain a pdf\n      file and .bin file.\n      <br />\n      <br />\n      <img src={RECFZIP} alt=\"Unzipping\" />\n      <br />\n      <br />A quick look at the binary file tells us that it's not\n      human-readable. We can use the <span id=\"keyword\">strings</span> command\n      to extract redable words but that won't get us far. We need to find a\n      different method in order to extract information.\n      <br />\n      <br />\n      <img src={RECFread} alt=\"Binary file\" />\n      <br />\n      <br />\n      This is where <a href=\"https://github.com/ReFirmLabs/binwalk\">\n        binkwalk\n      </a>{\" \"}\n      comes in. It's a fast, easy to use tool for analyzing, reverse\n      engineering, and extracting firmware images. It will parse the file and\n      return a table of content based on what it finds. Let's try running it\n      against our binary.\n      <br />\n      <br />\n      <img src={RECFbin} alt=\"binwalk output\" />\n      <br />\n      <br />\n      It seems we were able to get some pretty useful information. At{\" \"}\n      <span id=\"code\">0x19F70</span> sits a U-Boot string. U-Boot is a popular,\n      open-source bootloader used in embedded devices. A bootloader's job is to\n      load the OS when the device is turned on. At{\" \"}\n      <span id=\"code\">0x50000</span> we can find the uImage header which\n      contains useful information. This camera seems to use a MIPS CPU and use\n      Linux as an OS. The kernel image uses LZMA compression and it starts at{\" \"}\n      <span id=\"code\">0x50040</span>. Let's try extracting it!\n      <br />\n      <br />\n      To do that, we will use the <span id=\"keyword\">dd</span> command.\n      <br />\n      <br />\n      <img src={RECFdd} alt=\"dd\" />\n      <br />\n      <br />\n      The <span id=\"keyword\">if</span> option stands for input file. The{\" \"}\n      <span id=\"keyword\">skip</span> option allows you to specify which byte you\n      want to start copying from and <span id=\"keyword\">of</span> stands for\n      output file. You probably noticed that I skipped the{\" \"}\n      <span id=\"keyword\">bs</span> option (which stands for block size) and\n      that's because it would take a while to explain. If you're curious you can\n      just google it but it's not very important for our purposes here. We can\n      check the output file with the <span id=\"keyword\">file</span> command and\n      it confirms that it is indeed LZMA compressed data.\n      <br />\n      <br />\n      Next, we should unpack the output file with the{\" \"}\n      <span id=\"keyword\">unlzma</span> command.\n      <br />\n      <br />\n      <img src={RECFlzma} alt=\"unlzma\" />\n      <br />\n      <br />\n      It seems that the decompressed file might be another binary, so let's use\n      binwalk to check it out.\n      <br />\n      <br />\n      <img src={RECFbin2} alt=\"binwalk output\" />\n      <br />\n      <br />\n      We learn that the camera is using Linux kernel version 2.6, which was\n      released around 15 years ago, even though the image itself is relatively\n      recent. This means that it could potentially be vulnerable to tons of\n      kernel exploits that have been discovered over the years. There is also\n      more LZMA compressed data so let's extract it.\n      <br />\n      <br />\n      <img src={RECFlzma2} alt=\"unlzma\" />\n      <br />\n      <br />\n      It seems we found a cpio archive. Let's extract it!\n      <br />\n      <br />\n      <img src={RECFcpio} alt=\"extract cpio archive\" />\n      <br />\n      <br />\n      You can find what these options di with a simple{\" \"}\n      <span id=\"keyword\">man</span> but I think I should mention that the most\n      critical one is <span id=\"keyword\">--no-absolute-filenames</span> because\n      without it you might risk overwriting your root directory.\n      <br />\n      <br />\n      Et voila! We were able to extract the file system from the firmware,\n      giving us a better chance to understand how exactly this camera works.\n      <br />\n      <br />\n      <img src={RECFfs} alt=\"Linux filesystem\" />\n    </div>\n  );\n};\n\nexport default RECF;\n","import Header from \"./components/Header\";\nimport Title from \"./components/Title\";\nimport Writer from \"./components/Writer\";\nimport Footer from \"./components/Footer\";\nimport Writeups from \"./components/Blog\";\nimport MCNO from \"./components/Blog/MCNO\";\nimport MCS from \"./components/Blog/MCS\";\nimport MCH from \"./components/Blog/MCH\";\nimport RECF from \"./components/Blog/RECF\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div id=\"container\">\n          <Header />\n          <Title />\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => (\n              <span id=\"type\">\n                <Writer />\n              </span>\n            )}\n          />\n          <Route path=\"/Blog\" exact component={Writeups} />\n          <Route path=\"/Blog/Microcorruption-New-Orleans\" component={MCNO} />\n          <Route path=\"/Blog/Microcorruption-Sydney\" component={MCS} />\n          <Route path=\"/Blog/Microcorruption-Hanoi\" component={MCH} />\n          <Route\n            path=\"/Blog/Reverse-Engineering-Camera-Firmware\"\n            component={RECF}\n          />\n        </div>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/style.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}